<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
    <!ENTITY RFC2360 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2360.xml">
        <!ENTITY RFC2629 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2629.xml">
            <!ENTITY RFC3552 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3552.xml">
                <!ENTITY RFC5226 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
                    ]>
                    <?rfc strict="yes" ?>
                    <?rfc toc="yes"?>
                    <?rfc tocdepth="4"?>
                    <?rfc symrefs="yes"?>
                    <?rfc sortrefs="yes" ?>
                    <?rfc compact="yes" ?>
                    <?rfc subcompact="no" ?>


                    <rfc category="std" docName="rfc1" ipr="playgroundStd_v1_0" number="1">
                        <front>
                            <title abbrev="PRFC's"> POOP Request For Comments</title>
                            <author fullname="Jaron Lee" initials="J.L." role="editor" surname="Lee">
                                <organization>JHU Network Security Fall 2019</organization>

                                <address>
                                    <postal>
                                        <street>JHU 160 Malone Hall/3400 North Charles St.</street>
                                        <city>Baltimore</city>
                                        <region>MD</region>
                                        <code>21218</code>
                                        <country>USA</country>
                                    </postal>


                                    <phone></phone>
                                    <email>jaron.lee@jhu.edu</email>

                                </address>
                            </author>

                            <author fullname="Noam Finkelstein" initials="N.S.F" role="editor" surname="Finkelstein">
                                <organization>JHU Network Security Fall 2019</organization>

                                <address>
                                    <postal>
                                        <street>JHU 160 Malone Hall/3400 North Charles St.</street>
                                        <city>Baltimore</city>
                                        <region>MD</region>
                                        <code>21218</code>
                                        <country>USA</country>
                                    </postal>

                                    <phone></phone>
                                    <email>zli122@jhu.edu</email>

                                </address>
                            </author>


                            <author fullname="Max Li" initials="M.L." role="editor" surname="Li">
                                <organization>JHU Network Security Fall 2019</organization>

                                <address>
                                    <postal>
                                        <street>JHU 160 Malone Hall/3400 North Charles St.</street>
                                        <city>Baltimore</city>
                                        <region>MD</region>
                                        <code>21218</code>
                                        <country>USA</country>
                                    </postal>

                                    <phone></phone>
                                    <email>zli122@jhu.edu</email>

                                </address>
                            </author>

                            <date year="2019" />

                            <area>General</area>
                            <workgroup>Playground Experiment Director</workgroup>
                            <keyword>POOP</keyword>

                            <abstract>
                                <t>
                                The POOP (Playground Overlay Operating
                                Protocol) system is designed to give students
                                and researchers a layout to implement a
                                transport protocol. This PRFC specifies the
                                protocol for exchange of information necessary
                                to create a handshake over Playground.</t> 
                            </abstract>
                        </front>

                        <middle>
                            <section title="Introduction">
                                <t>This document aims to provide a complete and
                            unified protocol for interfacing with the Playground
                            system, for the purposes of creating a handshake.
                            This document outlines the process of creating a
                            handshake between the client and the server, and
                            specifies associated packet definitions for such
                            purpose.</t> 

                                <section title="Requirements Language">
                                    <t>The key words "MUST", "MUST NOT",
                                    "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
                                    "SHOULD NOT", "RECOMMENDED", "MAY", and
                                    "OPTIONAL" in this document are to be
                                    interpreted as described in <xref
                                    target="RFC2119">RFC 2119</xref>.</t> 
                                </section>
                            </section>

                            <section title="Outline of Interface">
                                <t>Agents are client and server.</t>
                                <section title="Data Transfer">
                                    <t>
                                        <list style="numbers">
                                            <t>Agents will communicate solely by
                                                sending each other packets of
                                the type DataPacket</t>

                                            <t>The data field should be bytes
                                                representing all or part of
                                                another packet.
                                            </t>

                                            <t>
                                                Multiple DataPacket packets with
                                                data fields that are identical
                                                to the data fields of previously
                                                sent DataPacket packets may be
                                                sent.
                                            </t>

                                            <t>
                                                No bytes representing full or
                                                partial packets may be sent
                                                other than as part of a data
                                                field that is identical to the
                                                one in which they were
                                                originally sent.
                                            </t>

                                            <t>All agents set the sequence
                                                number on the first packet they
                                                send to be the random integer in the range [0, 2^32) they generate in the process of starting the handshake.
                                            </t>

                                            <t>
                                Sequence numbers will subsequently be assigned
                                according to the following rules. If the data
                                contained in the DataPacket has not yet been
                                sent, the sequence number should be 1 greater
                                than the greatest sequence number previously
                                sent, mod 2^32. If the data contained in the
                                DataPacket has already been sent previously, and
                                is being resent, the sequence number should be
                                set to the sequence number of the DataPacket
                                used to send the data the first time it was
                                sent.
                                </t>

                                             <t>The hash field should be a hash
                                             of a serialized DataPacket with the data, seq,
                                             and ACK all set to their ultimate
                                             values, and hash set to 0. Our has is computed as
                                                 follows:
                                             'binascii.crc32(serialized_packet)
                                                 & 0xffffffff'</t>

                                             <t>Once an agent receives a
                                             DataPacket packet, and has
                                             confirmed that the hash matches the
                                             data, it must send back a
                                             DataPacket with an empty data
                                             field, and ACK set to the sequence
                                                 number of the packet it received</t>

                                             <t>Only one of "ACK" and "data"
                                             must be set. If "ACK" is set,
                                             "data" will be ignored, and if
                                             "data" is set, "ACK" will be ignored</t>

                                             <t>Once an agent receives
                                             confirmation of receipt of a
                                             DataPacket packet it sent, it
                                             can assume that the other agent has
                                                 received the data contained therein</t>

                                             <t>Each agent shall be considered
                                        responsible for every packet it has
                                                 acknowledge receipt of at any point</t>
                                        </list>
                                    </t>
                                </section>


                                    <section title="Handshake Protocol">
                                        <t>The Playground Handshake protocol MUST
                                    function in the following manner. The
                                        handshake will be communicated according
                                        to the Data Transfer protocol. The agent
                                        that sends the initial packet will be
                                        referred to as the "initiating agent",
                                        and the agent receiving the first packet
                                        will be referred to as the "receiving agent".
                                        </t> 
                                        <t>
                                            <list style="numbers">

                                                <t> X
                                                    and Y are random integers in the
                                                    range [0, 2^32), where 2^32 is
                                                    not included. HandshakePackets
                                                    are a POOP Packet Type
                                                    responsible for all handshake
                                                    initiation activities between
                                                    agents.</t>  

                                                <t>The initiating agent needs to send a
                                                HandshakePacket with SYN set to a
                                                random value X and status NOT
                                                STARTED to the other agent to request a
                                                connection.</t> 

                                                <t>Upon receiving the
                                                HandshakePacket, the receiving agent sends
                                                back a packet with ACK set to (X +
                                                1) mod 2^32, SYN set to a random
                                                    value Y and status SUCCESS.</t>

                                                <t>Upon receiving the
                                                HandshakePacket with status SUCCESS,
                                                the initiating agent checks if new ACK is (X +
                                                1) mod 2^32. If it is correct, the
                                                initiating agent sends back to
                                                receiving agent a
                                                HandshakePacket with ACK set to (Y +
                                                1) mod 2^32 (obtained from SYN of
                                                received packet), SYN set to (X + 1)
                                                mod 2^32, and status SUCCESS and
                                                acknowledge this connection with
                                                server. The connection is considered
                                                established on the initiating side.
                                                Else, the initiating agent sends back to
                                                server a HandshakePacket with status
                                                    set to ERROR. </t>

                                                <t>The server should check that the
                                                ACK received is the correct value of
                                                (Y + 1) mod 2^32. If it is correct,
                                                then the connection is considered
                                                established on the server side, and
                                                full duplex is achieved. Else, the
                                                server should send a HandshakePacket
                                                to the initiating agent with status set to
                                                    ERROR.</t>

                                                <t>Packets of a type other than
                                                HandShake packet should not be
                                                sent beyond the handshake layer
                                                until the handshake has been completed.</t>


                                            </list>
                                        </t>
                                    </section>


                                    <section title="Shutdown Protocol">
                                        <t>The Playground shutdown protocol MUST
                                    function in the following manner. The
                                        shutdown will be communicated according
                                        to the Data Transfer protocol
                                        </t> 
                                        <t>
                                            <list style="numbers">
                                                <t>The shutdown protocol is
                                        identical to the handshake protocol</t>  

                                                <t>A HandshakePacket sent by an
                                                agent after that agent has sent
                                                and received acknowledgment of a
                                                receipt of a HandshakePacket
                                                with a "SUCCESS" status MUST be
                                                interpretted as the
                                                    initialization of the
                                                    shutdown handshake
                                                </t>

                                                <t>Each agent should accept no
                                                packets with sequence numbers
                                                later than the last DataPacket
                                                acknowledging receipt of a
                                                HandshakePacket with a status
                                                set to SUCCESS, indicating the
                                                success of the shutdown handshake.
                                             </t>

                                             <t>Each agent must maintain the
                                             connection until it has received
                                             acknowledgment that each unique
                                             DataPacket it has sent has been
                                             received, and until it has received
                                             and acknowledged each DataPacket
                                             with a sequence number smaller than
                                             the last DataPacket it shall accept.
                                             </t>

                                             <t>When these conditions have been
                                                met, the agents SHOULD close the
                                                connection between them.</t>
                                            </list>
                                        </t>
                                    </section>


                            </section>

                            <section title="Packet Definitions">
                                <t>In this section we provide the REQUIRED packet definitions.</t>
                                <t>
                                    <figure>
                                        <artwork>
                                            <![CDATA[

                   class PoopPacketType(PacketType):
                       DEFINITION_IDENTIFIER = "poop"
                       DEFINITION_VERSION = "1.0"

                   class DataPacket(PoopPacketType):
                       DEFINITION_IDENTIFIER = "poop.datapacket"
                       DEFINITION_VERSION = "1.0"
                       
                       FIELDS = [
                           ("data", BUFFER({Optional:True})),
                           ("seq", UINT32), 
                           ("ACK", UINT32({Optional:True})), 
                           ("hash", UINT32),
                       ]
                   
                   class HandshakePacket(PoopPacketType):
                       DEFINITION_IDENTIFIER = "poop.handshakepacket"
                       DEFINITION_VERSION = "1.0"
                       
                       NOT_STARTED = 0
                       SUCCESS     = 1
                       ERROR       = 2
                       
                       FIELDS = [
                           ("SYN", UINT32({Optional:True})),
                           ("ACK", UINT32({Optional:True})),
                           ("status", UINT8),
                           ("error", STRING({Optional: True})),
                       ]
                   
                   ]]>
                                        </artwork>
                                    </figure>
                                </t>
                            </section>

                        </middle>

                        <back>
                            <references title="Normative References">
                                <!--?rfc include="http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
                                &RFC2119;

                                <!--?rfc include="http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2360.xml"?-->
                                &RFC2360;

                            </references>
                       </back>
                    </rfc>
