


Network Working Group                                        J. Lee, Ed.
Request for Comments: 1                                       M. Li, Ed.
Category: Standards Track                 JHU Network Security Fall 2019
                                                            October 2019


                       POOP Request For Comments

Abstract

   The POOP (Playground Overlay Operating Protocol) system is designed
   to give students and researchers a layout to implement a transport
   protocol.  This PRFC specifies the protocol for exchange of
   information necessary to create a handshake over Playground.

Status of this Memo

   This document specifies a Playgrounds standards track protocol for
   the Playground Experiment, and requests discussion and suggestions
   for improvements.  Distribution of this memo is unlimited.

Copyright Notice

   Copyright (c) 2019 SETH JAMES NIELSON.  All rights reserved.

   This document is used solely for educational purposes.  Any citations
   within this document are also for educational purposes and also for
   technical reference.  If any of these cited elements are protected
   under copyright, their inclusion here falls under Fair Use
   provisions.





















Lee & Li                     Standards Track                    [Page 1]

RFC 1                            PRFC's                     October 2019


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . . . 3
     1.1.  Requirements Language . . . . . . . . . . . . . . . . . . . 3
   2.  Outline of Interface  . . . . . . . . . . . . . . . . . . . . . 3
     2.1.  Handshake Protocol  . . . . . . . . . . . . . . . . . . . . 3
     2.2.  Data Transfer . . . . . . . . . . . . . . . . . . . . . . . 4
   3.  Packet Definitions  . . . . . . . . . . . . . . . . . . . . . . 4
   4.  Normative References  . . . . . . . . . . . . . . . . . . . . . 5
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . . . 5
   Intellectual Property and Copyright Statements  . . . . . . . . . . 7








































Lee & Li                     Standards Track                    [Page 2]

RFC 1                            PRFC's                     October 2019


1.  Introduction

   This document aims to provide a complete and unified protocol for
   interfacing with the Playground system, for the purposes of creating
   a handshake.  This document outlines the process of creating a
   handshake between the client and the server, and specifies associated
   packet definitions for such purpose.

1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].


2.  Outline of Interface

2.1.  Handshake Protocol

   The Playground Handshake protocol MUST function in the following
   manner.

   1.  Agents are client and server.  X and Y are random integers in the
       range [0, 2^32), where 2^32 is not included.  HandshakePackets
       are a POOP Packet Type responsible for all handshake initiation
       activities between agents.

   2.  The client needs to send a HandshakePacket with SYN set to a
       random value X and status NOT STARTED to the server to request a
       connection.

   3.  Upon receiving the HandshakePacket, the server sends back a
       packet with ACK set to (X + 1) mod 2^32, SYN set to a random
       value Y and status SUCCESS.

   4.  Upon receiving the HandshakePacket with status SUCCESS, the
       client checks if new ACK is (X + 1) mod 2^32.  If it is correct,
       the client sends back to server a HandshakePacket with ACK set to
       (Y + 1) mod 2^32 (obtained from SYN of received packet), SYN set
       to (X + 1) mod 2^32, and status SUCCESS and acknowledge this
       connection with server.  The connection is considered established
       on the client side.  Else, the client sends back to server a
       HandshakePacket with status set to ERROR.

   5.  The server should check that the ACK received is the correct
       value of (Y + 1) mod 2^32.  If it is correct, then the connection
       is considered established on the server side, and full duplex is
       achieved.  Else, the server should send a HandshakePacket to the



Lee & Li                     Standards Track                    [Page 3]

RFC 1                            PRFC's                     October 2019


       client with status set to ERROR.

   6.  If a packet other than HandshakePacket is received before an
       agent considers the connection established, that packet is
       ignored.

2.2.  Data Transfer

   1.  Once handshake has been successfully initialized, all further
       data transfer should occur through DataPacket, which is a POOP
       Packet Type containing a BUFFER data field.  No further handshake
       packets should be sent.

   2.  For both the client and the server, set the initial sequence
       number to be SYN number of the last HandshakePacket received
       during the handshake protocol

   3.  Whenever a DataPacket is sent, the current sequence number X
       should be sent with the packet.  Then, this sequence number
       should be incremented as (X + 1) mod 2^32.

   4.  If a packet other than DataPacket is received after an agent
       considers the connection established, that packet is ignored.


3.  Packet Definitions

   In this section we provide the REQUIRED packet definitions.























Lee & Li                     Standards Track                    [Page 4]

RFC 1                            PRFC's                     October 2019


                      class PoopPacketType(PacketType):
                          DEFINITION_IDENTIFIER = "poop"
                          DEFINITION_VERSION = "1.0"

                      class DataPacket(PoopPacketType):
                          DEFINITION_IDENTIFIER = "poop.datapacket"
                          DEFINITION_VERSION = "1.0"

                          FIELDS = [
                              ("data", BUFFER),
                              ("seq", UINT32)
                          ]

                      class HandshakePacket(PoopPacketType):
                          DEFINITION_IDENTIFIER = "poop.handshakepacket"
                          DEFINITION_VERSION = "1.0"

                          NOT_STARTED = 0
                          SUCCESS     = 1
                          ERROR       = 2

                          FIELDS = [
                              ("SYN", UINT32({Optional:True})),
                              ("ACK", UINT32({Optional:True})),
                              ("status", UINT8),
                              ("error", STRING({Optional: True}))
                          ]






4.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, DOI 10.17487/
              RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC2360]  Scott, G., "Guide for Internet Standards Writers", BCP 22,
              RFC 2360, DOI 10.17487/RFC2360, June 1998,
              <https://www.rfc-editor.org/info/rfc2360>.








Lee & Li                     Standards Track                    [Page 5]

RFC 1                            PRFC's                     October 2019


Authors' Addresses

   Jaron Lee (editor)
   JHU Network Security Fall 2019
   JHU 160 Malone Hall/3400 North Charles St.
   Baltimore, MD  21218
   USA

   Phone:
   Email: jaron.lee@jhu.edu


   Max Li (editor)
   JHU Network Security Fall 2019
   JHU 160 Malone Hall/3400 North Charles St.
   Baltimore, MD  21218
   USA

   Phone:
   Email: zli122@jhu.edu































Lee & Li                     Standards Track                    [Page 6]

RFC 1                            PRFC's                     October 2019


Full Copyright Statement

   Copyright (C) Seth James Nielson (2019).  All Rights Reserved.

   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph are
   included on all such copies and derivative works.  However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the PLAYGROUND experiment or
   other associated organizations, except by explicit permission.

   The limited permissions granted above are perpetual and will not be
   revoked by SETH JAMES NIELSON or his successors or assigns.

   This document and the information contained herein is provided on an
   "AS IS" basis and SETH JAMES NIELSON and associated academic
   institutions DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Intellectual Property

   The PLAYGROUND framework and student submissions for PLAYGROUND are
   intended to be free of any intellectual property conflicts.  All
   submitting parties, especially students, are not allowed to submit
   source code, specifications, or other components that are known to be
   protected by copyright, patents, or other IP mechanisms.  Students
   submitting creative content grant shared rights and ownership of
   their content to the PLAYGROUND project.  Specifically, any
   submission can be used in future educational settings including
   subsequent PLAYGROUND experiments.

   Any interested party is invited to bring to the experiment director's
   attention any copyrights, patents or patent applications, or other
   proprietary rights which may cover technology that may be currently
   in use without permission.

   It should be noted that these statements have not been reviewed by
   legal counsel.  Moreover, the academic institutions at which
   PLAYGROUND experiments take place may have additional or even
   conflicting copyright and intellectual property rules.  Accordingly,
   concerned parties may need to contact their own lawyer and/or
   resources at their institution to understand the rights and



Lee & Li                     Standards Track                    [Page 7]

RFC 1                            PRFC's                     October 2019


   limitations associated with code donated to a PLAYGROUND experiment.


















































Lee & Li                     Standards Track                    [Page 8]

